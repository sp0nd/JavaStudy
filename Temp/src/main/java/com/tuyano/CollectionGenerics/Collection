

                             Collection<E>

       Set : 순서를 유지하지 않는 데이터의 집합으로 데이터의 중복을 허용하지 않는다.

       구현 클래스
       1. HashSet
       - 가장빠른 임의 접근 속도
       - 순서를 예측할 수 없음

       2. LinkedHashSet
       - 입력된 순서대로 데이터를 관리하며, 중복을 허용하지 않음


       Set 아들 클래스 : SortedSet

       1. TreeSet
       - 정렬방법을 지정할 수 있음


       List :  순서가 있는 데이터의 집합으로 데이터의 중복을 허용한다.

       구현 클래스:
       1. LinkedList
       - 양방향 포인터 구조로 데이터의 삽입, 삭제가 빈번할 경우
       데이터의 위치정보만 수정하면 되기에 유용
       - 스택, 큐, 양방향 큐 등을 만들기 위한 용도로 쓰임

       2. Vector
        - 과거에 대용량 처리를 위해 사용했으며, 내부에서 자동으로
       동기화처리가 일어나 비교적 성능이 좋지 않고 무거워 잘 쓰이지 않음

       3. ArrayList
       - 단방향 포인터 구조로 각 데이터에 대한 인덱스를 가지고
       있어 조회 기능에 성능이 뛰어남



        Queue : List 와 유사
        구현 클래스
        1. LinkedList

        2. PriorityQueue(우선순위 큐)
        - 우선순위가 가장 높은 데이터로 관리함
        - 최대힙,최소힙이 있음(오름차순, 내림차순)

        Deque : 양방향 큐
        구현 클래스스
        1. ArrayDeque
        - 사이즈에 제한이 없다.
        - 외부 동기화 안됨. 즉 멀티 쓰레드에서 동시 접속 안됨
        - null 요소는 저장되지 않음
        - Stack 과 LinkedList 보다 빠름




                                            Map<K,V>
        키(Key), 값(Value)의 쌍으로 이루어진 데이터으 집합으로,
        순서는 유지되지 않으며 키(Key)의 중복을 허용하지 않으나 값(Value)의 중복은 허용한다.

        구현클래스
        1. Hashtable :
        - HashMap 보다는 느리지만 동기화 지원
        - null 불가

        2. HashMap   :
        - 중복과 순서가 허용되지 않으며 null 값이 올 수 있다.

        3. TreeMap   :
        - 정렬된 순서대로 키(Key)와 값(Value)을 저장하여 검색이 빠름

        4. LinkedHashMap :
        - 'HashMap' 을 상속 받아 사용
        - First in First out 방식으로 입력한 순서대로 반복 사용 가능


